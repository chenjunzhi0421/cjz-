"""
Django settings for dailyfresh_24 project.

Generated by 'django-admin startproject' using Django 1.8.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
import sys
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# 为了配合django的用户认证系统，我们需要给安装的应用，增加导包的路径

sys.path.insert(1, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '&xsw%v3r!)j9i-d-zr7o!)j^hn%)5hqz#1r%ba)bk4(t@7(ay7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False  # 改成线上模式

ALLOWED_HOSTS = ["*"]  # 允许任何IP访问


# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    # django默认已经安装了用户认证系统的应用
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'tinymce', # 富文本编辑器
    'haystack', # 搜索框架
    # 安装应用
    # django的用户认证系统规定，安装的应用的名称需要和AUTH_USER_MODEL = 'users.User'里面的应用名称一致
    'users',
    'orders',
    'goods',
    'cart',
)

MIDDLEWARE_CLASSES = (
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    # django默认开启了用户认证的中间件，用于做用户的认证，包括是否是登陆用户
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.auth.middleware.SessionAuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
)

ROOT_URLCONF = 'dailyfresh_24.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 模板加载路径
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dailyfresh_24.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

# 更换数据库引擎为Mysql
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'dailyfresh_24',
        'HOST': '127.0.0.1',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': 'mysql',
    }
}


# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

# 配置静态文件的加载路径
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]


# 配置django用户认证系统使用的一个模型类， 把AbstractUser 替换成User
# django 用户认证系统，在在指定模型类时，只能使用一个点（.）
AUTH_USER_MODEL = 'users.User'


# 配置django第三方邮件服务器
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # 导入邮件模块
EMAIL_HOST = 'smtp.yeah.net' # 发邮件主机
EMAIL_PORT = 25  # 发邮件端口
EMAIL_HOST_USER = 'dailyfreshzxc@yeah.net'  # 授权的邮箱
EMAIL_HOST_PASSWORD = 'dailyfresh123'  # 邮箱授权时获得的密码，非注册登陆密码
EMAIL_FORM = '天天生鲜<dailyfreshzxc@yeah.net>'  # 发件人抬头

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  #email后端
# EMAIL_USE_TLS = False   #是否使用TLS安全传输协议
# EMAIL_USE_SSL = True    #是否使用SSL加密，qq企业邮箱要求使用
# EMAIL_HOST = 'smtp.exmail.qq.com'   #发送邮件的邮箱 的 SMTP服务器，这里用了qq企业邮箱
# EMAIL_PORT = 465     #发件箱的SMTP服务器端口
# EMAIL_HOST_USER = '401141195@qq.com'    #发送邮件的邮箱地址
# EMAIL_HOST_PASSWORD = '*********'         #发送邮件的邮箱密码
# EMAIL_FORM = '天天生鲜<401141195@qq.com>'   # 发件人抬头


# 缓存
CACHES = {
    "default":{
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/5",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    }
}

# Session
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "default"


# 搭配login_required装饰器使用的，一旦装饰器检测到用户是未登录状态，就重定向到LOGIN_URL对应的地址
LOGIN_URL = '/users/login'

# 指定上传静态文件到fdfs时，使用的存储类，该FastDFSStorage类市自定义的，因为Django提供的文件存储类市无法满足需求
DEFAULT_FILE_STORAGE = 'utils.fastdfs.storage.FastDFSStorage'

# 搭配自定义Storage解耦使用
CLIENT_CONF = os.path.join(BASE_DIR, 'utils/fastdfs/client.conf')

# 搭配自定义Storage解耦nginx服务器ip时使用
SERVER_IP = 'http://192.168.92.136:8888/'

# 富文本编辑器配置
TINYMCE_DEFAULT_CONFIG = {
    'theme':'advanced', # 丰富样式
    'width': 600,
    'height': 400,
}

# 配置搜索引擎后端
HAYSTACK_CONNECTIONS = {
    'default':{
        # 使用whoosh引擎，提示：如果不需要使用jieba框架实现分词，就使用whoosh_backend
        'ENGINE': 'haystack.backends.whoosh_cn_backend.WhooshEngine',
        # 索引文件路径
        'PATH': os.path.join(BASE_DIR, 'whoosh_index')
    }
}

# 当添加，修改，删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'


# 配置alipay对接支付宝
ALIPAY_APPID = '2016091100487884'
APP_PRIVATE_KEY_PATH = os.path.join(BASE_DIR, 'apps/orders/app_private_key.pem')
ALIPAY_PUBLIC_KEY_PATH = os.path.join(BASE_DIR, 'apps/orders/alipay_public_key.pem')
ALIPAY_URL = 'https://openapi.alipaydev.com/gateway.do'